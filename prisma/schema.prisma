// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  MASTER
  OWNER
  CONTRIBUTOR
}

enum StatusType {
  ACTIVE
  INACTIVE
}
//Business table
model Business {
  id BigInt @id @default(autoincrement())
  name String @db.VarChar(150)
  address String @db.VarChar(200)
  phone String @db.VarChar(16) @unique
  role Role[]
  users User[]
  shops Shop[]
  clients Client[]
}
// one-to-many relationship Role have business
// Roles table
model Role {
  id BigInt @id @default(autoincrement())
  name String @db.VarChar(100)
  businessId BigInt @map("business_id")
  business Business @relation(fields: [businessId],references:[id])
  permission Permission?
  users User[]
}

// one-to-one relationship Permission have a role
//Permission table
model Permission {
  id BigInt @id @default(autoincrement())
  roleId BigInt @map("role_id") @unique
  role Role @relation(fields:[roleId],references:[id])
  canCreateService Boolean @default(false) @map("can_create_service")
  canUpdateService Boolean @default(false) @map("can_update_service")
  canDeleteService Boolean @default(false) @map("can_delete_service")
  canReadService Boolean @default(true)@map("can_read_services")
  canGenerateReport Boolean @default(false) @map("can_generate_report")
  canCreateUser Boolean @default(false) @map("can_create_user")
  canUpdateUser Boolean @default(false) @map("can_update_user")
  canDeleteUser Boolean @default(false) @map("can_delete_user")
  canCreateRole Boolean @default(false) @map("can_create_role")
  canEditRole Boolean @default(false) @map("can_edit_role")
  canDeleteRole Boolean @default(false) @map("can_delete_role")
  canCreateReservation Boolean @default(true) @map("can_create_reservation")
  canUpdateReservation Boolean @default(true) @map("can_update_reservation")
  canDeleteReservation Boolean @default(true) @map("can_delete_reservation")
  canReadReservation Boolean @default(true) @map("can_read_reservation")
  canCreateShop Boolean @default(false) @map("can_create_shop")
  canUpdateShop Boolean @default(false) @map("can_update_shop")
  canDeleteShop Boolean @default(false) @map("can_delete_shop")
}


//User Table

model User {
  id  BigInt @id @default(autoincrement())
  name String @db.VarChar(100)
  lastname String @db.VarChar(100)
  email String @unique @db.VarChar(150)
  password String @db.VarChar(256)
  phone String @db.VarChar(16) @unique
  isOwner Boolean @default(false) @map("is_owner")
  parentId BigInt? @map("parent_id")
  parent User? @relation("parent",fields:[parentId],references:[id])
  children User[] @relation("parent")
  accountType AccountType @default(OWNER) @map("account_type")
  businessId BigInt @map("business_id")
  business Business @relation(fields:[businessId],references:[id])
  shopUsers ShopUser[]
  roleId BigInt @map("role_id")
  role Role @relation(fields: [roleId], references: [id])
}

//Shop table
model Shop {
  id BigInt @id @default(autoincrement())
  name String @db.VarChar(100)
  address String @db.VarChar(200)
  phone String @db.VarChar(16) @unique
  businessId BigInt @map("business_id")
  business Business @relation(fields:[businessId],references:[id])
  shopUsers ShopUser[]
}

//ShopUser table
// this table is used to create a many-to-many relationship between User and Shop
model ShopUser {
  id BigInt @id @default( autoincrement() )
  shopId BigInt @map("shop_id")
  shop  Shop @relation(fields: [shopId], references: [id])
  userId BigInt @map("user_id")
  user User @relation(fields: [userId], references: [id])
}
//service table
model Service {
  id BigInt @id @default(autoincrement())
  name String @db.VarChar(150)
  description String @db.Text
  price Float @db.DoublePrecision
  serviceModifier ServiceModifier[]
}
//modifier table
model Modifier {
  id BigInt @id @default(autoincrement())
  name String @db.VarChar(150)
  description String @db.Text
  price Float @db.DoublePrecision
  serviceModifier ServiceModifier[]
}
//serviceModifier table
// this table is used to create a many-to-many relationship between Service and Modifier
model ServiceModifier {
  id BigInt @id @default(autoincrement())
  serviceId BigInt @map("service_id")
  service Service @relation(fields: [serviceId], references: [id])
  modifierId BigInt @map("modifier_id")
  modifier Modifier @relation(fields: [modifierId], references: [id])
  status StatusType @default(ACTIVE)
}

//client table
model Client {
  id BigInt @id @default(autoincrement())
  name String @db.VarChar(100)
  lastname String @db.VarChar(100)
  email String @unique @db.VarChar(150)
  phone String @db.VarChar(16) @unique
  address String @db.VarChar(200)
  businessId BigInt @map("business_id")
  business Business @relation(fields:[businessId],references:[id])

}