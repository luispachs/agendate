// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model Business {
  id  BigInt @id @default(autoincrement())
  name String
  address String
  phone String @unique
  ownerId String @unique
  owner User @relation( fields: [ownerId],references: [id])
  role Role[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  lastname String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password String?
  accounts      Account[]
  sessions      Session[]
  business Business[] 
  role Role @relation(fields: [roleId], references: [id])
  roleId BigInt 
  userHeadquater UserHeadquarter[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}



model Role{
  id BigInt @id @default(autoincrement())
  name String
  permissions BigInt
  business Business @relation(fields: [businessId], references: [id] ,onDelete: Restrict ,onUpdate: Restrict)
  businessId BigInt @map("business_id")
  user User[]
  permission Permissions @relation(fields: [permissionId], references: [id]) 
  permissionId BigInt @unique
}

model Permissions {
  id BigInt @id @default(autoincrement())
  canCreateService Boolean @default(true)
  canReadService Boolean @default(true)
  canUpdateService Boolean @default(false)
  canDeleteService Boolean @default(false)
  canCreateSchedule Boolean @default(true)
  canReadSchedule Boolean @default(true)
  canUpdateSchedule Boolean @default(false)
  canDeleteSchedule Boolean @default(false)
  canSeeReport Boolean @default(true)
  canDownloadReport Boolean @default(false)
  canContactClient Boolean @default(false)
  role Role?
}

model Headquarter {
  id BigInt @id @default(autoincrement())
  name String
  address String @unique
  phone String @unique
  userHeadquarter UserHeadquarter[]
}

model UserHeadquarter {
  id BigInt @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  headquarter Headquarter @relation(fields: [headquarterId],references: [id])
  headquarterId BigInt
}

model Service{
  id BigInt @id @default(autoincrement())
  name String
  price Float @default(0.0)
  description String?
  serviceModifier ServiceModifier[]
}

model Modifier{
  id BigInt @id @default(autoincrement())
  name String
  price Float @default(0.0)
  description String?
  serviceModifier ServiceModifier[]
}

model ServiceModifier {
  id BigInt @id @default(autoincrement())
  modifier Modifier @relation(fields: [modifierId], references: [id])
  modifierId BigInt
  service Service @relation(fields: [serviceId],references: [id])
  serviceId BigInt
}